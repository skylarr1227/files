# -*- coding: utf-8 -*-
# Standard Library
from typing import List, Mapping, Tuple

__all__ = [
    "theme_name",
    "pet_count",
    "pet_names",
    "pet_modifiers",
    "item_count",
    "item_material",
    "item_modifier",
    "item_slots",
    "monster_count",
    "monster_names",
    "monster_attributes",
    "monster_modifiers",
    "any_monster_can_be_a_boss",
    "locations",
    "theater",
    "reasons",
]

# ----------------------------------------- Need manual input ----------------------------------------------------------
#  -------------- Theme Name ----------
theme_name: str = "Template"  # Name of the Theme

#  -------------- Pets values ----------
pet_count: int = 20000
# if the combination of all material, slots and modifiers dont reach this then you will have less items than this number

# Note: Add names in the order of how strong a pet should be, first is weakest, last is strongest
pet_names: List[str] = [
    "moth",
    "viper",
    "armadillo",
    "snake",
    "eel",
    "spider",
    "fox",
    "wolf",
    "cat",
    "boar",
    "owl",
    "imp",
    "leopard",
    "tiger",
    "eagle",
    "bear",
    "hippocampus",
    "ox",
    "leprechaun",
    "spirit",
    "hawk",
    "fairy",
    "wraith",
    "treant",
    "panther",
    "kirin",
    "griffin",
    "pegasus",
    "phoenix",
    "manticore",
    "chimera",
    "unicorn",
    "nymph",
    "dragon",
]
pet_modifiers: List[str] = [
    "singed",
    "charred",
    "blue-dyed",
    "feeble",
    "angry",
    "sad",
    "annoyed",
    "aggrivated",
    "large",
    "strong",
    "frostbitten",
    "eerie",
    "cave",
    "waterlogged",
    "fire-hardened",
    "windswept",
    "earth-bound",
    "frenzied",
    "blood-soaked",
    "zephyr",
    "angelic",
    "infernal",
    "blessed",
    "hellspawn",
    "immaculate",
    "horny",
    "sky chosen"
]

#  -------------- Items values ----------
item_count: int = 20000  # Maximum number of items generated per rarity,
# if the combination of all material, slots and modifiers dont reach this then you will have less items than this number

# Note: Add names in the order of how strong a material/modifier should be, first is weakest, last is strongest
item_material: List[str] = [
    "leather",
    "hide",
    "fur",
    "rat skin",
    "human skin",
    "whale fur",
    "silken",
    "silver",
    "iron",
    "quartz",
    "emerald",
    "draconium",
    "ironwood",
    "spider-silk",
    "tin",
    "demon-pube",
    "spellsteel",
    "platinum",
    "demonium",
    "ultra-demonium",
    "volcanic glass",
    "diamondium",
    "cocksteel",
    "quicksilver",
    "unicorn horn",
    "dragonscale",
    "dragonplate",
    "ebony",
    "obsidian",
    "elven",
    "obsidium",
    "cobalt",
    "aether",
    "admantite",
    "dalekanium",
    "duranium",
    "etherium",
    "mithril",
    "nanite",
    "asteroid",
    "unknown",
    "demon anal-leather",
    "unobtanium",
    "jesusteel",
    "satan-weave",
    "angel-weave",
    "demonbound",
    "god-steel",
    "sky-blessed",
    "dark-matter",
]
item_modifier: List[str] = [
    "cursed",
    "hexed",
    "old",
    "small",
    "fractured",
    "moldy",
    "blood-stained",
    "ever-moist",
    "crusty",
    "blackened",
    "shrunken",
    "dented",
    "repaired",
    "patchwork",
    "corroded",
    "rusty",
    "plain",
    "artisan",
    "sturdy",
    "forged",
    "masterwork",
    "shimmering",
    "blessed",
    "soulbound",
    "caressed",
    "fey-touched",
    "grandmaster",
    "enchanted",
    "battle-hardened",
    "hell-forged",
    "demonized",
    "heavenly",
    "godly",
    "sky-forged",
]

# Do not change the keys, only the list content
item_slots: Mapping[str, List[str]] = {
    "head": ["cap", "hat", "helmet", ],
    "neck": ["collar", "necklace", "charm", "chain", "thread", "scarf", "choker", "amulet"],
    "chest": ["cuirass", "overcoat", "jacket", "vest", "armor", "chainmail", "full-plate", "breastplate", "hooded-robe", "skin-tight armored bakini"],
    "gloves": ["gloves", "gauntlets", "hand-guards", "pimp-smackers"],
    "belt": ["belt", "rope", "cock-blocker", "chain", "peen-defender"],
    "legs": ["chaps", "leggings", "guards", "pants", "skins", "legplates", "greaves"],
    "boots": ["boots", "sandals", "sabatons", "shoes", "foot-guards"],
    "left": [
        "sword",
        "shortsword",
        "pimp-cane",
        "minotaurs dick",
        "club",
        "axe",
        "longsword",
        "dagger",
        "shield",
        "arcane-barrier",
        "wand",
        "tome",
        "war axe",
        "rod",
        "orb",
        "rod",
    ],
    "right": ["sword", "club", "axe", "longsword", "dagger", "katana", "wand", "war axe", "mace", "gladius", "flail", "morning-star", "katana", "kunai", "skin-sword" ],
    "two handed": [
        "greatsword",
        "bow",
        "quarterstaff",
        "staff",
        "katana",
        "battle axe",
        "warhammer",
        "crossbow",
        "maul",
        "halberd"
        "long-spear",
        "yumi",
        "huge skin-sword"
        "intelligent leaf blade"

    ],
    "ring": ["ringlet", "fingerwrap", "ring", "band"],
    "charm": ["figurine", "shard", "charm", "spellbook", "prism", "crystal", "tools"],
}

#  -------------- Monsters values ----------
monster_count: int = 10000
# if the combination of names and modifiers don't reach this then you will have less items than this number
# Note: Add names in the order of how strong a modifier should be, first is weakest, last is strongest
monster_modifiers: List[str] = [
    "Red-assed",
    "Miserable",
    "Blue-balled",
    "Plagued",
    "Anxious",
    "Fleshy",
    "Malevolent",
    "Skeletal",
    "Earthen",
    "Water-infused",
    "Flame-bound",
    "Wind-enchanted",
    "Ice-covered",
    "Frost",
    "Collosal",
    "Voluptuous",
    "Beautiful",
    "Energized",
    "Radiant",
    "Kryptic",
    "Ancient",
    "Ethereal",
    "Celestial",
    "Shadow",
    "Primal",
    "Godly",
]
# This one is a bit different ... we need the image url too, so its a list of Tuple
monster_names: List[Tuple[str, str]] = [
    ("Dove", "https://cdn.pixabay.com/photo/2016/02/23/20/31/dove-1218474_960_720.jpg"),
    ("Bat", "https://live.staticflickr.com/3741/9187712502_bbecd929e1_b.jpg"),
    ("Baboon","https://i.imgur.com/3O0B93W.jpg"),
    ("Badger","https://www.dictionary.com/e/wp-content/uploads/2018/07/honey-badger-300x300.jpg"),
    ("WildCat","https://i.pinimg.com/originals/d1/73/57/d173574031358105769cb118c390280d.jpg"),
    ("Human Commoner","https://i4w8j7y6.stackpathcdn.com/wp-content/uploads/2016/10/Human-Body-4.jpg"),
    ("Crab","https://pngriver.com/wp-content/uploads/2018/04/Download-Crab-Transparent-Background.png"),
    ("Deer","https://www.bing.com/th?id=OIP.hES1UGKLYq_jzF16rHiyvQHaFS&w=293&h=209&c=7&o=5&cb=10&pid=1.7"),
    ("Eagle","http://d2fbmjy3x0sdua.cloudfront.net/sites/default/files/Golden_Eagle_n10-14-013_l.jpg"),
    ("Frog","https://www.pngfind.com/pngs/m/13-138387_free-png-download-frog-png-png-images-background.png"),
    ("Beetle","https://www.pngfind.com/pngs/m/662-6623138_beetle-png-image-background-rhinoceros-beetle-beetle-png.png"),
    ("Homunculus","https://media-waterdeep.cursecdn.com/avatars/thumbnails/18/287/310/315/636379803928245506.jpeg"),
    ("Hyena","https://content.eol.org/data/media/80/d5/88/542.6857176072.jpg"),
    ("Jackal","http://www.krugerpark.co.za/images/1jackal-gc590a.jpg"),
    ("Quipper","https://media-waterdeep.cursecdn.com/avatars/thumbnails/0/253/259/315/636252767919065233.jpeg"),
    ("Scorpion","https://middle.pngfans.com/20190619/jb/giant-scorpion-dnd-5e-png-dungeons-dragons-scorp-2b4fec0f31d869b0.jpg"),
    ("Shrieker","https://vignette.wikia.nocookie.net/forgottenrealms/images/2/29/Fungus.gif/revision/latest?cb=20180820100757"),
    ("Spider","https://vignette.wikia.nocookie.net/legendarywars/images/6/67/Spidey_Tier_1_Spider.png/revision/latest/scale-to-width-down/250?cb=20120314142543"),
    ("Bandit","https://i.pinimg.com/474x/f9/65/6c/f9656cbad319a609dedbc13b2573c96d.jpg"),
    ("Blood Hawk","https://www.oort.nz/dnd/wiki/blood%20hawk.636334288270143064.jpeg"),
    ("Cultist",""),
    ("Diseased Rat",""),
    ("Flying Snake",""),
    ("Kobold",""),
    ("Stirge",""),
    ("Blink Dog",""),
    ("Dretch",""),
    ("Drow",""),
    ("Flying Sword",""),
    ("Centipede",""),
    ("Goblin",""),
    ("Grimlock",""),
    ("Pseudodragon",""),
    ("Skeleton",""),
    ("Sprite",""),
    ("Mephit",""),
    ("Violet Fungus",""),
    ("Zombie",""),
    ("Ape",""),
    ("Cockatrice","")
    ("Assassin","")
    ("Chain Devil",""),
    ("Hezrou",""),
    ("Shield Guardian",""),
    ("Wyvern",""),
    ("Oni",""),
    ("Vrock",""),
    ("Mammoth",""),
    ("Mage",""),
    ("Specter",""),
    ("Spirit Naga",""),
    ("Succubus",""),
    ("Reef Shark",""),
    ("Satyr",""),
    ("Shadow",""),
    ("Wyrmling",""),
    ("Death Dog",""),
    ("Tarrasque",""),
    ("Dryad",""),
    ("Duergar Rat",""),
    ("Ghoul Snake",""),
    ("Giant Octopus",""),
    ("Hippogriff",""),
    ("Imp",""),
    ("Ankheg",""),
    ("Azer",""),
    ("Ettercap",""),
    ("Gargoyle",""),
    ("Awakened Tree","")
    ("Gelatinous Cube",""),
    ("Grick",""),
    ("Mimic",""),
    ("Merrow",""),
    ("Ochre Jelly",""),
    ("Ogre",""),
    ("Ogre Zombie",""),
    ("Pegasus",""),
    ("Plesiosaurus",""),
    ("Sea Hag",""),
    ("Wererat",""),
    ("Will-o'-Wisp",""),
    ("Bearded Devil",""),
    ("Doppelganger",""),
    ("Hell Hound",""),
    ("Manticore",""),
    ("Minotaur",""),
    ("Nightmare",""),
    ("Owlbear",""),
    ("Phase Spider",""),
    ("Werewolf",""),
    ("Wight",""),
    ("Black Pudding",""),
    ("Ettin",""),
    ("Incubus",""),
    ("Lamia",""),
    ("Weretiger",""),
    ("Bulette",""),
    ("Grimlock",""),
    ("Flesh Golem",""),
    ("Gorgon",""),
    ("Hill Giant",""),
]

any_monster_can_be_a_boss: bool = True  # if True any mob has a 50/50 change of being a boss

# Name: [Health multiplier, diplomacy Multiplier]
monster_attributes: Mapping[str, List[float]] = {
    " terrifying": [1, 1.2],
    " staunch": [1.15, 1],
    " gigantic": [1.4, 1],
    " humongous": [2, 0.8],
    " prodigious": [1.6, 0.8],
    " hideous": [1, 1],
    " foul-smelling": [1.0, 0.8],
    " disgusting": [1, 0.7],
    " plagued": [1.2, 0.9],
    "n ordinary": [1, 1],
    " miniscule": [0.2, 1.1],
    " weary": [0.6, 0.9],
    " tiny": [0.7, 1],
    " small": [0.8, 1],
    " weak": [0.5, 1],
    "n extremely turned-on": [1.0 1.0],
    " lazy": [0.4, 0.9],
    " sick": [0.3, 0.9],
    " stupid": [1, 0.5],
    " flustered": [0.9, 1.1],
    " delirious": [0.6, 0.8],
    " sad-looking": [0.9, 0.8],
    " cunning": [1.2, 1.2],
    " scheming": [1.3, 1],
    " highly-scarred": [1.4, 1.1],
    " focused": [1.2, 1],
    " fat": [1.1, 0.9],
    " muscle-bound": [1.2, 0.7],
    " fairly intelligent": [1, 1.2],
    " dumb": [1, 0.8],
    "n old": [0.8, 1.5],
    "n ancient": [0.8, 2],
    " savage": [1.8, 0.9],
    "n absolutely brutal-looking": [1.9, 1.1],
    " terrifyingly colassal-size": [2.0, 1.5],
}

#  -------------- Location values ----------
locations: List[str] = [
    "There is telling of a dangerous cave nearby, holding immense riches. ",
    "There is a rumor of riches stored in a nearby cave. ",
    "You found a small clearing. ",
    "A bridge crosses over a deep gorge. ",
    "This town's inn looks very inviting. ",
    "A trail winds up the side of a mountain. ",
    "You hear a rumor of a treasure outside the town. ",
    "You found a clearing with sunshine streaming in from above. ",
    "The remains of some sort of ritual can be found ahead. ",
    "There is rumor of an adventurer's demise over the next hill. ",
    "A small path can be seen heading into some brush. ",
    "An overgrown grove lies ahead. ",
    "A deserted ritual space can be seen ahead. ",
    "The path widens and there is a small field. ",
    "You spy an ancient-looking chest resting against a tree. ",
    "The path ahead winds down into a valley below. ",
    "The birds and animals around you suddenly have gone silent. ",
    "There is a rumor that a rich dragon lives nearby. ",
    "You stumble upon a small grotto. ",
    "A thin, rickety wooden bridge stretches across a canyon. ",
    "You find a cave entrance covered in moss. ",
    "Thin tendrils of fog are starting to creep across the path. ",
    "There is a rumor of an ancient treasure nearby. ",
    "A small glittering object can be seen ahead on the side of the path. ",
    "The path opens up into a clearing, and fresh bones can be seen in the grass. ",
    "The path starts to thin and the trees feel like they are starting to reach towards you. ",
    "A mossy stone altar can be seen ahead. ",
    "Glowing stones surrounding what looks to be a deep put lie just up ahead. ",
    "Your world seems to melt around you, and then reform again with something you cant quite make out infront of you. ",
    "A massive, short block of intricately-carved stone can be seen on the side of the path. ",
    "You hear a strange noise, unlike any animal you've heard before. ",
    "The birds suddenly stop singing and the silence in the forest is deafening. An open clearing lies ahead. ",
    "Rusty metal scraps are strewn about on the path ahead. ",
    "You stumble across the very fresh remains of another unfortunate adventurer. ",
]

#  -------------- Theater values ----------
theater: List[str] = [
    " menace",
    " glee",
    " malice",
    " all means necessary",
    " a couple of friends",
    " a crosseyed squint",
    " a pigish glare",
    " a lust filled pelvic thrust",
    " an idiotic frown",
    " an aura of pure evil",
    " a fightening aura",
    " a steady pace",
    " a rumbling growl",
    " a grumpy growl"
    " a lazy squint",
    " a hesitant step",
    " a tense glare",
    " an authoritative stance",
    " a cruel snarl",
    " agitated pacing",
    " an easy stride",
    " an animated pace",
    " terse growls",
    " defiance",
    " an indifferent squint",
    " contempt",
    " restless pacing",
    " a terrifying growl",
    " an puny squeel",
]

#  -------------- Reasons values ----------
reasons: List[str] = [
    " is going to investigate,",
    " is curious to have a peek,",
    " would like to have a look,",
    " wants to go there,",
    " thinks it would be a good idea to investigate,",
    " would like to go check it out,",
    " is excited to go see what could be found,",
    " thinks everyone should go check it out,",
    " is going to go take a look,",
    " thinks there could be treasure to be found,",
    " wants to go see,",
    " wants to investigate,",
    " is going to go sneak over to look,",
    " stubbed their toe and screamed like a little bitch so loud that,",
    " can't contain their curiosity and takes off without a second thought",
    " is enthralled by mystical music and must go find out what is making it",
    " hears loud sexual grunts and moaning and trys to get a peak at whats making the noises"
    " loses control of their body and walks off around a corner like a zombie"
    " sees the spot ahead marked on their treasure map with an X and runs forward to find it"
    " is distracted by a womans voice ahead saying to follow her and mindlessly goes to find her"
    " is overcome by the need to find a place to use the bathroom and runs out of site to find a place to go"
    " convinces everyone to come see something ahead"
    " wants to tear the monster up ahead limb from limb and lets out a battle cry running forward"

]
